#!/bin/bash

# Installation can take time.
# You can tail -F /var/log/nuxeo_install.log to see basic install progress
# You can tail -F /var/log/syslog to see the full startup and check for errors

source /etc/profile.d/load_env.sh

INSTALL_LOG="/var/log/nuxeo_install.log"
echo "Nuxeo Presales Installation Script Starting [${DNS_NAME}]" > ${INSTALL_LOG}

# Check DNS Name
if [ -z "${DNS_NAME}" ]
then
  DNS_NAME=${STACK_ID}
  echo "Warning: DNS Name is not set, using stack id: ${STACK_ID}" | tee -a ${INSTALL_LOG}
fi

ES_MAJOR="6.x" # used for package installation
ES_VERSION="6.5.4"

# Increase open files limit
echo '*       soft    nofile      4096' >> /etc/security/limits.conf
echo '*       hard    nofile      8192' >> /etc/security/limits.conf

# Add the nuxeo repository to the repository list
code=$(lsb_release -cs)
echo "deb http://apt.nuxeo.org/ $code releases" > /etc/apt/sources.list.d/nuxeo.list

# Register the nuxeo key
wget -q -O- http://apt.nuxeo.org/nuxeo.key | apt-key add -

# Set the hostname & domain
echo "${DNS_NAME}" > /etc/hostname
hostname ${DNS_NAME}
echo "Domains=cloud.nuxeo.com" >> /etc/systemd/resolved.conf

# Pre-accept Sun Java license & set Nuxeo options
echo nuxeo nuxeo/bind-address select 127.0.0.1 | debconf-set-selections
echo nuxeo nuxeo/http-port select 8080 | debconf-set-selections
echo nuxeo nuxeo/database select Autoconfigure PostgreSQL | debconf-set-selections

# Upgrade packages and install apache, ssh, ...
echo "Nuxeo Presales Installation Script: Apache, upgrade packages, etc." | tee -a ${INSTALL_LOG}
export DEBIAN_FRONTEND=noninteractive
locale-gen en_US.UTF-8
update-locale LANG=en_US.UTF-8
apt-get update
apt-get -q -y upgrade
apt-get -q -y install apache2 apt-transport-https openssh-server openssh-client vim jq
echo "Please wait a few minutes for you instance installation to complete" > /var/www/html/index.html
echo "Nuxeo Presales Installation Script: Apache, upgrade packages, etc. => DONE" | tee -a ${INSTALL_LOG}

# Install JA fonts
apt-get -q -y install fonts-takao

# Install Java
echo "Nuxeo Presales Installation Script: Install Java" | tee -a ${INSTALL_LOG}
apt-get -q -y install openjdk-11-jdk
echo "Nuxeo Presales Installation Script: Install Java => DONE" | tee -a ${INSTALL_LOG}

# Install elasticsearch
echo "Nuxeo Presales Installation Script: Install Elasticsearch and Kibana" | tee -a ${INSTALL_LOG}
wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -
echo "deb https://artifacts.elastic.co/packages/${ES_MAJOR}/apt stable main" > /etc/apt/sources.list.d/elastic-${ES_MAJOR}.list
apt-get update
apt-get -q -y install elasticsearch=${ES_VERSION} kibana=${ES_VERSION}
/bin/systemctl daemon-reload
/bin/systemctl enable elasticsearch.service
/bin/systemctl enable kibana.service

# ES Plugins
/usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-kuromoji
/usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-icu
# Set default ES heap to 1G
sed -i 's/Xms2g/Xms1g/g' /etc/elasticsearch/jvm.options
sed -i 's/Xmx2g/Xmx1g/g' /etc/elasticsearch/jvm.options

# Set Kibana options
printf '\nserver.basePath: "/kibana"' >> /etc/kibana/kibana.yml

service elasticsearch start
service kibana start
echo "Nuxeo Presales Installation Script: Install Elasticsearch and Kibana => DONE" | tee -a ${INSTALL_LOG}

# Install additional Repos
echo "Nuxeo Presales Installation Script: Install Repositories" | tee -a ${INSTALL_LOG}
apt-get -q -y install ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository -y universe
add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
add-apt-repository -y ppa:certbot/certbot
apt-get update
echo "Nuxeo Presales Installation Script: Install Repositories => DONE" | tee -a ${INSTALL_LOG}

# Install docker
echo "Nuxeo Presales Installation Script: Install Docker" | tee -a ${INSTALL_LOG}
apt-get -q -y remove docker docker-engine docker.io
apt-get -q -y install docker-ce
echo "Nuxeo Presales Installation Script: Install Docker => DONE" | tee -a ${INSTALL_LOG}

# Install Certbot
echo "Nuxeo Presales Installation Script: Install Certbot" | tee -a ${INSTALL_LOG}
apt-get -q -y install certbot python-certbot-apache
echo "Nuxeo Presales Installation Script: Install Certbot => DONE" | tee -a ${INSTALL_LOG}

# Install Nuxeo
echo "Nuxeo Presales Installation Script: Install Nuxeo" | tee -a ${INSTALL_LOG}
apt-get -q -y install nuxeo
service nuxeo stop
echo "Nuxeo Presales Installation Script: Install Nuxeo => DONE" | tee -a ${INSTALL_LOG}

#add nuxeo user to docker group
usermod -aG docker nuxeo

#skip wizard
sed -i '/nuxeo.wizard.done=false/d' /etc/nuxeo/nuxeo.conf
sed -i '1inuxeo.wizard.done=true' /etc/nuxeo/nuxeo.conf
#enable dev mode
sed -i '1iorg.nuxeo.dev=true' /etc/nuxeo/nuxeo.conf
#use standalone elasticsearch
sed -i '1ielasticsearch.addressList=localhost:9200' /etc/nuxeo/nuxeo.conf
#enable remote debugging
sed -i '1iJAVA_OPTS=$JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n' /etc/nuxeo/nuxeo.conf
#set nuxeo application public dns
sed -i '1inuxeo.url='https://${DNS_NAME}'.cloud.nuxeo.com/nuxeo' /etc/nuxeo/nuxeo.conf
sed -i '1i# Host Configuration' /etc/nuxeo/nuxeo.conf

MAIL_PASS=$(aws secretsmanager get-secret-value --secret-id workmail_default_password --region us-west-2 | jq -r '.SecretString|fromjson|.workmail_default_password')
sed -i '1inuxeo.notification.eMailSubjectPrefix=[Nuxeo] ' /etc/nuxeo/nuxeo.conf
sed -i '1imail.transport.protocol=smtps' /etc/nuxeo/nuxeo.conf
sed -i '1imail.smtp.ssl.enable=true' /etc/nuxeo/nuxeo.conf
sed -i '1imail.from=no-reply@nuxeo-demo.awsapps.com' /etc/nuxeo/nuxeo.conf
sed -i '1imail.transport.auth=true' /etc/nuxeo/nuxeo.conf
sed -i '1imail.transport.user=no-reply@nuxeo-demo.awsapps.com' /etc/nuxeo/nuxeo.conf
sed -i '1imail.transport.password=${MAIL_PASS}' /etc/nuxeo/nuxeo.conf
sed -i '1imail.transport.port=465' /etc/nuxeo/nuxeo.conf
sed -i '1imail.transport.host=smtp.mail.us-east-1.awsapps.com' /etc/nuxeo/nuxeo.conf
sed -i '1i# Mail Configuration' /etc/nuxeo/nuxeo.conf


if [[ "${S3BUCKET}" == "true" ]]; then
  #add s3 bucket property
  sed -i '1inuxeo.s3storage.bucket='${STACK_ID}-bucket /etc/nuxeo/nuxeo.conf
  sed -i '1inuxeo.s3storage.bucket_prefix=binary_store/' /etc/nuxeo/nuxeo.conf
  sed -i '1inuxeo.s3storage.region='${REGION} /etc/nuxeo/nuxeo.conf
  sed -i '1inuxeo.s3storage.directdownload=true' /etc/nuxeo/nuxeo.conf
  sed -i '1inuxeo.s3storage.directdownload.expire=3600' /etc/nuxeo/nuxeo.conf

  #add s3 direct upload config
  sed -i '1inuxeo.s3storage.useDirectUpload=true' /etc/nuxeo/nuxeo.conf
  sed -i '1inuxeo.s3storage.transient.roleArn='${UPLOAD_ROLE_ARN} /etc/nuxeo/nuxeo.conf
  sed -i '1inuxeo.s3storage.transient.bucket='${STACK_ID}-bucket /etc/nuxeo/nuxeo.conf
  sed -i '1inuxeo.s3storage.transient.bucket_prefix=upload/' /etc/nuxeo/nuxeo.conf
  sed -i '1i# S3 Configuration' /etc/nuxeo/nuxeo.conf
fi


echo "Nuxeo Presales Installation Script: Install Misc. (ffmpeg, etc.)" | tee -a ${INSTALL_LOG}
# Update some defaults
update-alternatives --set editor /usr/bin/vim.basic

apt-get install -q -y mediainfo ffmpeg x264 x265 figlet atop

# Install latest aws cli using pip
apt-get install -q -y python3-pip
pip3 install awscli --upgrade --user
export PATH=$PATH:~/.local/bin/

apt-get -y clean
echo "Nuxeo Presales Installation Script: Install Misc. (ffmpeg, etc.) => DONE" | tee -a ${INSTALL_LOG}

# Configure reverse-proxy
cat << EOF > /etc/apache2/sites-available/nuxeo.conf
<VirtualHost _default_:80>

    ServerName  $DNS_NAME.cloud.nuxeo.com

    CustomLog /var/log/apache2/nuxeo_access.log combined
    ErrorLog /var/log/apache2/nuxeo_error.log

    Redirect permanent / https://$DNS_NAME.cloud.nuxeo.com/

</VirtualHost>

<VirtualHost _default_:443 >

    ServerName  $DNS_NAME.cloud.nuxeo.com

    CustomLog /var/log/apache2/nuxeo_access.log combined
    ErrorLog /var/log/apache2/nuxeo_error.log

    DocumentRoot /var/www

    ProxyRequests   Off
     <Proxy * >
        Order allow,deny
        Allow from all
     </Proxy>

    <Location /kibana>
      AuthUserFile /etc/apache2/passwords
      AuthName authorization
      AuthType Basic
      require valid-user
    </Location>

    RewriteEngine   On
    RewriteRule ^/$ /nuxeo/ [R,L]
    RewriteRule ^/nuxeo$ /nuxeo/ [R,L]
    RewriteRule ^/kibana$ /kibana/ [R,L]

    ProxyPass           /nuxeo/         http://localhost:8080/nuxeo/
    ProxyPass           /ARender/       http://localhost:8080/ARender/
    ProxyPass           /kibana/        http://localhost:5601/
    ProxyPassReverse    /nuxeo/         http://localhost:8080/nuxeo/
    ProxyPassReverse    /ARender/       http://localhost:8080/ARender/
    ProxyPassReverse    /kibana/        http://localhost:5601/
    ProxyPreserveHost   On

    # WSS
    ProxyPass         /_vti_bin/     http://localhost:8080/_vti_bin/
    ProxyPass         /_vti_inf.html http://localhost:8080/_vti_inf.html
    ProxyPassReverse  /_vti_bin/     http://localhost:8080/_vti_bin/
    ProxyPassReverse  /_vti_inf.html http://localhost:8080/_vti_inf.html

    RequestHeader   append nuxeo-virtual-host "https://$DNS_NAME.cloud.nuxeo.com/"

    # Retain TLS1.1 for backwards compatibility until Jan 2020
    # These must be *after* the Certbot entry
    #XXX SSLProtocol all -SSLv2 -SSLv3 -TLSv1
    # SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
    # Enable high ciphers for 3rd party security scanners
    #XXX SSLCipherSuite HIGH:!aNULL:!MD5:!3DES

    ## BEGIN SUPINT-655 ##
    <Location "/nuxeo/incl">
      RewriteRule .* - [R=404,L,NC]
    </Location>
    ## END SUPINT-655 ##
</VirtualHost>
EOF

# Add gzip compression for the REST API
cat > /etc/apache2/mods-available/deflate.conf <<EOF
<IfModule mod_deflate.c>
        <IfModule mod_filter.c>
                # these are known to be safe with MSIE 6
                AddOutputFilterByType DEFLATE text/html text/plain text/xml

                # everything else may cause problems with MSIE 6
                AddOutputFilterByType DEFLATE text/css
                AddOutputFilterByType DEFLATE application/x-javascript application/javascript application/ecmascript
                AddOutputFilterByType DEFLATE application/rss+xml
                AddOutputFilterByType DEFLATE application/xml
                AddOutputFilterByType DEFLATE application/json
        </IfModule>
</IfModule>
EOF

a2enmod proxy proxy_http rewrite ssl headers
a2dissite 000-default
a2ensite nuxeo
KIBANA_PASS=$(aws secretsmanager get-secret-value --secret-id kibana_default_password --region us-west-2 | jq -r '.SecretString|fromjson|.kibana_default_password')
htpasswd -b -c /etc/apache2/passwords kibana "${KIBANA_PASS}"
apache2ctl -k graceful

# Enable SSL certs
echo "Nuxeo Presales Installation Script: Enable Certbot Certificate" | tee -a ${INSTALL_LOG}
certbot -q --apache --redirect --hsts --uir --agree-tos -m wwpresales@nuxeo.com -d ${DNS_NAME}.cloud.nuxeo.com | tee -a ${INSTALL_LOG}

echo "Nuxeo Presales Installation Script: Setup profile, ubuntu, etc." | tee -a ${INSTALL_LOG}

#fix imagemagick Policy
wget https://raw.githubusercontent.com/nuxeo/presales-vmdemo/${NX_BRANCH}/ImageMagick/policy.xml -O /etc/ImageMagick-6/policy.xml

#set up profile for nuxeo user
cat << EOF > /var/lib/nuxeo/server/.profile
export NUXEO_CONF=/etc/nuxeo/nuxeo.conf
cd /var/lib/nuxeo/server/bin
echo  "Hi, nuxeo user. NUXEO_CONF is defined, and you are in /bin, ready to ./nuxeoctl"
alias ll='ls -al'
alias la='ls -a'
alias ..='cd ..'
export TERM="xterm-color"
export PS1='\[\e[0;33m\]\u\[\e[0m\]@\[\e[0;32m\]\h\[\e[0m\]:\[\e[0;34m\]\w\[\e[0m\]\$ '
alias dir='ls -alFGh'
alias hs='history'
alias mytail='tail -F /var/log/nuxeo/server.log'
alias vilog='vi /var/log/nuxeo/server.log'
figlet -t $DNS_NAME.cloud.nuxeo.com
EOF
chown nuxeo:nuxeo /var/lib/nuxeo/server/.profile

#set up vim for nuxeo user
cat << EOF > /var/lib/nuxeo/server/.vimrc
" Set the filetype based on the file's extension, but only if
" 'filetype' has not already been set
au BufRead,BufNewFile *.conf setfiletype conf
EOF
chown nuxeo:nuxeo /var/lib/nuxeo/server/.vimrc

#set up ubuntu user
cat << EOF >> /home/ubuntu/.profile
export TERM="xterm-color"
export PS1='\[\e[0;33m\]\u\[\e[0m\]@\[\e[0;32m\]\h\[\e[0m\]:\[\e[0;34m\]\w\[\e[0m\]\$ '
alias dir='ls -alFGh'
alias hs='history'
alias mytail='tail -F /var/log/nuxeo/server.log'
alias vilog='vi /var/log/nuxeo/server.log'
alias mydu='du -sh */'
figlet $DNS_NAME.cloud.nuxeo.com
EOF

#set up vim for ubuntu user
cat << EOF > /home/ubuntu/.vimrc
" Set the filetype based on the file's extension, but only if
" 'filetype' has not already been set
au BufRead,BufNewFile *.conf setfiletype conf
EOF
echo "Nuxeo Presales Installation Script: Setup profile, ubuntu, etc. => DONE" | tee -a ${INSTALL_LOG}

#register the nuxeo instance
if [ -n "${NX_STUDIO}" ]; then
  echo "Nuxeo Presales Installation Script: Install Studio project" | tee -a ${INSTALL_LOG}
  echo "$(date) Register Nuxeo Instance" | tee -a ${INSTALL_LOG}

  CREDENTIALS=$(aws secretsmanager get-secret-value --secret-id connect_shared_presales_credential --region us-west-2 | jq -r '.SecretString|fromjson|.connect_presales_pwd')
  nuxeoctl register nuxeo_presales ${NX_STUDIO} "dev" "AWS_${STACK_ID}" "${CREDENTIALS}" | tee -a ${INSTALL_LOG}
  nuxeoctl mp-hotfix --accept true | tee -a ${INSTALL_LOG}
  nuxeoctl mp-install nuxeo-web-ui marketplace-disable-studio-snapshot-validation --accept true | tee -a ${INSTALL_LOG}
  if [[ "${S3BUCKET}" == "true" ]]; then
    nuxeoctl mp-install amazon-s3-online-storage amazon-s3-direct-upload --accept true | tee -a ${INSTALL_LOG}
  fi
  nuxeoctl mp-install ${NX_STUDIO}-0.0.0-SNAPSHOT --accept true | tee -a ${INSTALL_LOG}
  echo "Nuxeo Presales Installation Script: Install Studio project => DONE" | tee -a ${INSTALL_LOG}
fi

echo "Nuxeo Presales Installation Script Complete" | tee -a ${INSTALL_LOG}

#decrease nuxeo startup priority
mv /etc/rc3.d/S*nuxeo /etc/rc3.d/S99nuxeo
