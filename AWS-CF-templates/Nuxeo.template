{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Nuxeo Presales Demo Template (LTS2023)",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "General"
          },
          "Parameters": [
            "GitBranch",
            "Customer",
            "DnsName",
            "Contact"
          ]
        },
        {
          "Label": {
            "default": "Nuxeo Setup"
          },
          "Parameters": [
            "GitBranchPresalesDocker",
            "StudioProject",
            "StudioVersion",
            "InstanceType",
            "DiskSize",
            "AutoStart",
            "RPMs",
            "UseS3Bucket"
          ]
        },
        {
          "Label": {
            "default": "NEV Setup (optional)"
          },
          "Parameters": [
            "NEVGitBranch",
            "MakeNEV",
            "NEVInstanceType",
            "NEVVersion",
            "NEVArenderAddon",
            "NEVAutoStart"
          ]
        }
      ],
      "ParameterLabels": {
        "MakeNEV": {
          "default": "Create a NEV stack? =====> If yes, make sure latest version of NEV.template has been uploaded to s3 <====="
        },
        "NEVInstanceType": {
          "default": "NEV instance type"
        },
        "NEVVersion": {
          "default": "NEV Version"
        },
        "NEVArenderAddon": {
          "default": "ARender addon"
        },
        "NEVAutoStart": {
          "default": "Autostart"
        },
        "NEVGitBranch": {
          "default": "Git branch for NEV stack"
        }
      }
    }
  },
  "Parameters": {
    "DnsName": {
      "Description": "(REQUIRED) Host prefix (e.g. you enter 'mydemo', the host will be 'mydemo.cloud.nuxeo.com')",
      "Type": "String",
      "AllowedPattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9]))*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
      "MinLength": 1,
      "ConstraintDescription": "Please specify a valid DNS host prefix"
    },
    "InstanceType": {
      "Description": "Type of EC2 instance.  If you plan to install Arender, t3.medium is too small",
      "Type": "String",
      "Default": "t3.medium",
      "AllowedValues": [
        "t3.micro",
        "t3.small",
        "t3.medium",
        "t3.large",
        "t3.xlarge",
        "t3.2xlarge",
		"m5.2xlarge",
        "m7a.large",
        "m7a.xlarge",
        "m7a.2xlarge",
        "m7a.4xlarge",
        "c7a.large",
        "c7a.xlarge",
        "c7a.2xlarge",
        "c7a.4xlarge",
        "c7a.8xlarge"
      ]
    },
    "GitBranchPresalesDocker": {
      "Type": "String",
      "Default": "master",
      "Description": "Nuxeo stack setup (https://github.com/nuxeo-sandbox/nuxeo-presales-docker branch)"
    },
    "GitBranch": {
      "Type": "String",
      "Default": "master",
      "Description": "EC2 instance setup (https://github.com/nuxeo-sandbox/presales-vmdemo branch)"
    },
    "Customer": {
      "Type": "String",
      "Description": "Prospect name, or 'generic' if this is a generic demo",
      "MinLength": 1,
      "ConstraintDescription": "Please specify a customer"
    },
    "StudioProject": {
      "Type": "String",
      "Description": "The Nuxeo Studio project name (MUST be accessible by 'nuxeo_presales' user)"
    },
    "StudioVersion": {
      "Type": "String",
      "Default": "0.0.0-SNAPSHOT",
      "Description": "The Nuxeo Studio version (used with Release in Studio to install a different version)"
    },
    "AutoStart": {
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "true",
      "Description": "Auto-start the Nuxeo runtime; if false, log into your instance to start Nuxeo",
      "Type": "String"
    },
    "RPMs": {
      "Type": "String",
      "Description": "Additional RPM packages that should be installed, ok to leave empty"
    },
    "Contact": {
      "Type": "String",
      "Default": "wwpresalesdemos@hyland.com",
      "Description": "Contact email address"
    },
    "DiskSize": {
      "Type": "Number",
      "Default": 20,
      "Description": "Disk size (in GB) for root volume of EC2 instance. If you plan to install ARender, 40GB should be a minimum"
    },
    "UseS3Bucket": {
      "AllowedValues": [
        "Shared",
        "Create",
        "None"
      ],
      "Default": "Shared",
      "Description": "Use a 'Shared' bucket or 'Create' a new S3 bucket for this stack, otherwise use 'None' to disable bucket creation",
      "Type": "String"
    },
    "MakeNEV": {
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "false",
      "Description": "Use to create a child NEV stack; false = do not create a NEV stack.",
      "Type": "String"
    },
    "NEVInstanceType": {
      "Description": "t3.medium = 2vCPU/4GB, t3.large = 2vCPU/8GB, t3.xlarge = 4vCPU/16GB",
      "Type": "String",
      "Default": "t3.medium",
      "AllowedValues": [
        "t3.medium",
        "t3.large",
        "t3.xlarge"
      ]
    },
    "NEVVersion": {
      "Type": "String",
      "Default": "2.3.0",
      "Description": "https://doc.nuxeo.com/nxdoc/nuxeo-enhanced-viewer-release-notes/"
    },
    "NEVArenderAddon": {
      "Type": "String",
      "Default": "nuxeo-arender",
      "Description": "The Nuxeo ARender addon package to install. Must be compatible with NEV Version."
    },
    "NEVDiskSize": {
      "Type": "Number",
      "Default": 40,
      "Description": "Disk size (in GB) for root volume of EC2 instance."
    },
    "NEVAutoStart": {
      "Type": "String",
      "Description": "Auto-start NEV; if false, you need to log into your instance to start NEV",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Default": "true"
    },
    "NEVGitBranch": {
      "Type": "String",
      "Default": "master",
      "Description": "Branch to use from https://github.com/nuxeo-sandbox/presales-vmdemo"
    }
  },
  "Conditions": {
    "CreateS3Bucket": {
      "Fn::Equals": [
        {
          "Ref": "UseS3Bucket"
        },
        "Create"
      ]
    },
    "ShareS3Bucket": {
      "Fn::Equals": [
        {
          "Ref": "UseS3Bucket"
        },
        "Shared"
      ]
    },
    "UseS3": {
      "Fn::Or": [
        {
          "Condition": "CreateS3Bucket"
        },
        {
          "Condition": "ShareS3Bucket"
        }
      ]
    },
    "CreateNestedNEV": {
      "Fn::Equals": [
        {
          "Ref": "MakeNEV"
        },
        "true"
      ]
    }
  },
  "Mappings": {
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "64": "ami-021243b33e59072f6"
      },
      "us-west-1": {
        "64": "ami-0fefa31d371b65ccd"
      },
      "us-west-2": {
        "64": "ami-0f02cc50386018ccb"
      },
      "eu-west-1": {
        "64": "ami-0bde38addbe64e3f2"
      },
      "ap-northeast-1": {
        "64": "ami-07040aad449e6ee68"
      },
      "sa-east-1": {
        "64": "ami-0447ec39c2be4fe31"
      }
    },
    "AWSRegionSubnet": {
      "us-east-1": {
        "vpc": "vpc-01311a6a321841d60",
        "subnet": "subnet-0d192be7ed6d2faa2",
        "defaultSG": "sg-062c837c3212332af"
      },
      "us-west-1": {
        "vpc": "vpc-420fa925",
        "subnet": "subnet-5d71ff06",
        "defaultSG": "sg-03ed657a"
      },
      "us-west-2": {
        "vpc": "vpc-0e6cdc3402852ec63",
        "subnet": "subnet-070006c83fad19822",
        "defaultSG": "sg-0f3a23a4873fb211c"
      },
      "ap-northeast-1": {
        "vpc": "vpc-73016014",
        "subnet": "subnet-f3daebba",
        "defaultSG": "sg-1d5b9365"
      },
      "eu-west-1": {
        "vpc": "vpc-5420e830",
        "subnet": "subnet-dbc879bf",
        "defaultSG": "sg-d63eb3b1"
      },
      "sa-east-1": {
        "vpc": "vpc-0d2362c5f3e332f13",
        "subnet": "subnet-00c372f7bb8d17f3f",
        "defaultSG": "sg-059186871b0fd77b1"
      }
    }
  },
  "Resources": {
    "NuxeoSecret": {
      "Type": "AWS::SecretsManager::Secret",
      "Properties": {
        "Name": {
          "Fn::Sub": [
            "${name}-NuxeoSecret",
            {
              "name": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        },
        "GenerateSecretString": {
          "SecretStringTemplate": "{\"password\":\"${password}\"}",
          "GenerateStringKey": "password",
          "PasswordLength": 36,
          "ExcludeCharacters": "\"`-~'@/!#$%^&*()_=+[]{};:?>.<,\\",
          "ExcludeUppercase": true
        }
      }
    },
    "NuxeoInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "NuxeoSecurity",
              "GroupId"
            ]
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": {
                "Ref": "DiskSize"
              }
            }
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            "64"
          ]
        },
        "SubnetId": {
          "Fn::FindInMap": [
            "AWSRegionSubnet",
            {
              "Ref": "AWS::Region"
            },
            "subnet"
          ]
        },
        "Tags": [
          {
            "Key": "contact",
            "Value": {
              "Ref": "Contact"
            }
          },
          {
            "Key": "environment",
            "Value": "dev"
          },
          {
            "Key": "cfTemplateVersion",
            "Value": "1.0.0"
          },
          {
            "Key": "billing-category",
            "Value": "presales"
          },
          {
            "Key": "billing-subcategory",
            "Value": {
              "Ref": "Customer"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "dnsName",
            "Value": {
              "Ref": "DnsName"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "InstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Sub": [
              "#!/bin/bash\n\nwget https://raw.githubusercontent.com/nuxeo-sandbox/presales-vmdemo/${branch}/EC2-scripts/Nuxeo.sh\necho export UPLOAD_ROLE_ARN=${uploadRole} REKOGNITION_ROLE_ARN=${rekognitionRole} SNS_TOPIC_ARN=${snsTopic} STACK_ID=${stack} DNS_NAME=${dnsName} REGION=${region} S3BUCKET=${bucket} NX_BRANCH=${branch} PRESALES_DOCKER_BRANCH=${branchForPresalesDocker} NX_STUDIO=${studio} NX_STUDIO_VER=${studioVer} AUTO_START=${autoStart} INSTALL_RPM=${rpms} MAKE_NEV=${MakeNEV} ARENDER_ADDON=${ArenderAddon} NUXEO_SECRET=${NuxeoSecret} >> /etc/profile.d/load_env.sh\nbash Nuxeo.sh\n",
              {
                "stack": {
                  "Ref": "AWS::StackName"
                },
                "dnsName": {
                  "Ref": "DnsName"
                },
                "region": {
                  "Ref": "AWS::Region"
                },
                "bucket": {
                  "Ref": "UseS3Bucket"
                },
                "branch": {
                  "Ref": "GitBranch"
                },
                "branchForPresalesDocker": {
                  "Ref": "GitBranchPresalesDocker"
                },
                "studio": {
                  "Ref": "StudioProject"
                },
                "studioVer": {
                  "Ref": "StudioVersion"
                },
                "autoStart": {
                  "Ref": "AutoStart"
                },
                "rpms": {
                  "Ref": "RPMs"
                },
                "ArenderAddon": {
                  "Ref": "NEVArenderAddon"
                },
                "NuxeoSecret": {
                  "Ref": "NuxeoSecret"
                },
                "MakeNEV": {
                  "Ref": "MakeNEV"
                },
                "uploadRole": {
                  "Fn::If": [
                    "UseS3",
                    {
                      "Fn::GetAtt": [
                        "UploadRole",
                        "Arn"
                      ]
                    },
                    "false"
                  ]
                },
                "rekognitionRole": {
                  "Fn::GetAtt": [
                    "RekognitionRole",
                    "Arn"
                  ]
                },
                "snsTopic": {
                  "Ref": "RekognitionSns"
                }
              }
            ]
          }
        }
      }
    },
    "NuxeoSecurity": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": {
          "Fn::Sub": [
            "${name}-sg",
            {
              "name": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        },
        "VpcId": {
          "Fn::FindInMap": [
            "AWSRegionSubnet",
            {
              "Ref": "AWS::Region"
            },
            "vpc"
          ]
        },
        "GroupDescription": "Allow ports 22 (SSH), 80 (HTTP) and 443 (HTTPS)",
        "SecurityGroupIngress": [
          {
            "Description": "SSH access only from EC2 connect endpoint",
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Fn::FindInMap": [
                "AWSRegionSubnet",
                {
                  "Ref": "AWS::Region"
                },
                "defaultSG"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": [
                "${name}-sg",
                {
                  "name": {
                    "Ref": "AWS::StackName"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Sub": [
            "${name}-ec-instance-role",
            {
              "name": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceSharedResourcePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": [
            "${name}-shared-resource-instance-policy",
            {
              "name": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:ListAllMyBuckets",
              "Resource": [
                "arn:aws:s3:::*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation",
                "s3:GetObject"
              ],
              "Resource": [
                "arn:aws:s3:::presales-instance-resources",
                "arn:aws:s3:::presales-instance-resources/*",
                "arn:aws:s3:::dam-demo-assets",
                "arn:aws:s3:::dam-demo-assets/*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "textract:*",
                "comprehend:*",
                "rekognition:DetectLabels",
                "rekognition:DetectText",
                "rekognition:RecognizeCelebrities",
                "rekognition:GetCelebrityInfo",
                "rekognition:DetectModerationLabels",
                "rekognition:DetectFaces",
                "transcribe:*",
                "translate:TranslateText",
                "rekognition:StartLabelDetection",
                "rekognition:GetLabelDetection",
                "rekognition:StartCelebrityRecognition",
                "rekognition:GetCelebrityRecognition",
                "rekognition:StartContentModeration",
                "rekognition:GetContentModeration",
                "rekognition:StartFaceDetection",
                "rekognition:GetFaceDetection",
                "rekognition:StartTextDetection",
                "rekognition:GetTextDetection",
                "rekognition:StartSegmentDetection",
                "rekognition:GetSegmentDetection"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": "secretsmanager:GetSecretValue",
              "Resource": [
                "arn:aws:secretsmanager:us-west-2:311032021612:secret:connect_shared_presales_credential-D1gcYT",
                "arn:aws:secretsmanager:us-west-2:311032021612:secret:kibana_default_password-klGGXN",
                "arn:aws:secretsmanager:us-west-2:311032021612:secret:workmail_default_password-RLzJRZ",
                {
                  "Ref": "NuxeoSecret"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "UploadRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "UseS3",
      "Properties": {
        "RoleName": {
          "Fn::Sub": [
            "${name}-direct-upload-role",
            {
              "name": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {
                    "Fn::GetAtt": [
                      "InstanceRole",
                      "Arn"
                    ]
                  }
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "RekognitionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Sub": [
            "${name}-rekognition-role",
            {
              "name": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "rekognition.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "publishToSns",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "sns:Publish",
                  "Resource": {
                    "Ref": "RekognitionSns"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "SharedS3Policy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "ShareS3Bucket",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": [
            "${name}-s3-instance-policy",
            {
              "name": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListAllMyBuckets"
              ],
              "Resource": "arn:aws:s3:::*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucketMultipartUploads",
                "s3:GetBucketObjectLockConfiguration",
                "s3:GetBucketVersioning"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-demo-bucket"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucketMultipartUploads",
                "s3:PutObjectRetention",
                "s3:PutObjectLegalHold"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-demo-bucket/",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-demo-bucket/s3DirectUpload/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "SharedS3UploadPolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "ShareS3Bucket",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": [
            "${name}-direct-upload-policy",
            {
              "name": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:PutObject",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "AWS::Region"
                      },
                      "-demo-bucket/",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "/upload/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "UploadRole"
          }
        ]
      }
    },
    "CreateS3Policy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "CreateS3Bucket",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": [
            "${name}-s3-instance-policy",
            {
              "name": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListAllMyBuckets"
              ],
              "Resource": "arn:aws:s3:::*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucketMultipartUploads",
                "s3:GetBucketObjectLockConfiguration",
                "s3:GetBucketVersioning"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3Bucket"
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:DeleteObject",
                "s3:AbortMultipartUpload",
                "s3:ListMultipartUploadParts",
                "s3:ListBucketMultipartUploads",
                "s3:PutObjectRetention",
                "s3:PutObjectLegalHold"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3Bucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "CreateS3UploadPolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "CreateS3Bucket",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": [
            "${name}-direct-upload-policy",
            {
              "name": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:PutObject",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3Bucket"
                      },
                      "/upload/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "UploadRole"
          }
        ]
      }
    },
    "RekognitionInstancePolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Fn::Sub": [
            "${name}-ai-rekognition-policy",
            {
              "name": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sns:GetTopicAttributes",
                "sns:ListSubscriptionsByTopic",
                "sns:Subscribe"
              ],
              "Resource": {
                "Ref": "RekognitionSns"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "iam:GetRole",
                "iam:PassRole"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "RekognitionRole",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Condition": "CreateS3Bucket",
      "Properties": {
        "BucketName": {
          "Fn::Sub": [
            "${name}-bucket",
            {
              "name": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "contact",
            "Value": {
              "Ref": "Contact"
            }
          },
          {
            "Key": "billing-category",
            "Value": "presales"
          },
          {
            "Key": "billing-subcategory",
            "Value": {
              "Ref": "Customer"
            }
          }
        ],
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "GET",
                "HEAD",
                "PUT",
                "POST"
              ],
              "AllowedOrigins": [
                {
                  "Fn::Sub": [
                    "https://${name}.cloud.nuxeo.com",
                    {
                      "name": {
                        "Ref": "DnsName"
                      }
                    }
                  ]
                }
              ],
              "ExposedHeaders": [
                "ETag",
                "Content-Disposition"
              ]
            }
          ]
        }
      }
    },
    "RekognitionSns": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": {
          "Fn::Sub": [
            "${name}-rekognition-sns",
            {
              "name": {
                "Ref": "AWS::StackName"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "contact",
            "Value": {
              "Ref": "Contact"
            }
          },
          {
            "Key": "billing-category",
            "Value": "presales"
          },
          {
            "Key": "billing-subcategory",
            "Value": {
              "Ref": "Customer"
            }
          }
        ]
      }
    },
    "NestedStackNEV": {
      "Type": "AWS::CloudFormation::Stack",
      "Condition": "CreateNestedNEV",
      "Properties": {
        "TemplateURL": "https://presales-vmdemo-bucket.s3.amazonaws.com/nuxeo-sandbox/lts2023/NEV.template",
        "Parameters": {
          "DnsName": {
            "Fn::Sub": [
              "${name}-nev",
              {
                "name": {
                  "Ref": "DnsName"
                }
              }
            ]
          },
          "InstanceType": {
            "Ref": "NEVInstanceType"
          },
          "Customer": {
            "Ref": "Customer"
          },
          "Contact": {
            "Ref": "Contact"
          },
          "NEVVersion": {
            "Ref": "NEVVersion"
          },
          "NuxeoURL": {
            "Fn::Sub": [
              "https://${name}.cloud.nuxeo.com/nuxeo",
              {
                "name": {
                  "Ref": "DnsName"
                }
              }
            ]
          },
          "DiskSize": {
            "Ref": "NEVDiskSize"
          },
          "AutoStart": {
            "Ref": "NEVAutoStart"
          },
          "NuxeoSecret": {
            "Ref": "NuxeoSecret"
          },
          "GitBranch": {
            "Ref": "NEVGitBranch"
          }
        },
        "TimeoutInMinutes": "60"
      }
    }
  },
  "Outputs": {
    "InstanceID": {
      "Description": "Nuxeo Instance ID",
      "Value": {
        "Ref": "NuxeoInstance"
      }
    },
    "SshCommand": {
      "Description": "The AWS CLI command to ssh the nuxeo instance",
      "Value": {
        "Fn::Sub": [
          "aws ec2-instance-connect ssh --instance-id ${instanceId} --os-user ubuntu --connection-type eice --region ${region}",
          {
            "region": {
              "Ref": "AWS::Region"
            },
            "instanceId": {
              "Ref": "NuxeoInstance"
            }
          }
        ]
      }
    }
  }
}

